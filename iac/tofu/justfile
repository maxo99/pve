## Justfile for Terraform/OpenTofu Operations

set dotenv-load := true

ROOT_SSH := "ssh pve-01"
# TF_LOG_PATH := "./.tflog/tf-debug.log"
DATE_TIME := "$(date +%Y-%m-%d-%H%M%S)"
TF_LOG_LEVEL := "DEBUG"
TF_LOG_PATH := "./.tflog/tf-debug-" + DATE_TIME + ".log"

# DATE := env('DATE', shell('date +%F'))
#
default:
    just --list
#
# Quick status check without hanging operations
status-check:
    #!/usr/bin/env bash
    echo "üìä OpenTofu Status Check (no refresh)"
    echo "State resources:"
    tofu state list | wc -l
    echo ""
    echo "Configuration validation:"
    tofu validate
    echo ""
    echo "Provider status:"
    timeout 10 tofu providers || echo "Provider check timed out"

#
apply-passwords-only:
    TF_PARALLELISM=1 tofu apply -target='module.lxcs.random_password.admin_password' -target='module.lxcs.null_resource.store_password_in_vault'



tf-plan-lxc name:
    tofu plan -target='module.lxcs["{{name}}"]'

#
show:
    tofu show

list:
    tofu state list

output:
    tofu output



#
# Prints a tab-separated list: KEY\tID\tNAME ‚Äî easy to filter with grep/awk/cut.
_get-lxcs:
    #!/bin/bash
    tofu output -json lxcs | jq -r 'to_entries[] | "\(.key)\t\(.value.id)\t\(.value.name)"'

_get-lxcs-names:
    #!/bin/bash
    tofu output -json lxcs | jq -r 'to_entries[] | .value.name'

_get-lxcs-ids:
    #!/bin/bash
    tofu output -json lxcs | jq -r 'to_entries[] | .value.id // empty'

for-each-lxc:
    #!/bin/bash
    cmd=$(cat -)
    if [ -z "$cmd" ]; then
        echo "Usage: just <recipe>  # then pipe a heredoc into 'just for-each-lxc'"
        exit 1
    fi

    json=$(tofu output -json lxcs)
    for container in $(jq -r 'keys[]' <<< "$json"); do
        id=$(jq -r ".${container}.id" <<< "$json")
        name=$(jq -r ".${container}.name" <<< "$json")
        if [ "$id" != "null" ] && [ -n "$id" ]; then
            ID="$id" NAME="$name" bash -lc "$cmd"
        fi
    done

pve-get-lxc-ips:
    #!/bin/bash
    echo "=== LXC Container IP Addresses ==="
    # Iterate centralized `just _get-lxcs` output (KEY<TAB>ID<TAB>NAME)
    while IFS=$'\t' read -r key id name; do
        if [ -n "$id" ] && [ "$id" != "null" ]; then
            echo "Container: $name (ID: $id)"
            ssh pve-01 "pct exec $id -- ip addr show eth0 | grep 'inet ' | head -1 | awk '{print \$2}' | cut -d'/' -f1" 2>/dev/null || echo "  Not running or no IP"
        fi
    done < <(just _get-lxcs)

lxc-test-ssh:
    #!/bin/bash
    echo "=== Testing SSH Access to Containers ==="
    ./scripts/ssh-test.sh test-lxc-batch


tf-validate:
    tofu validate
    @echo "=== Checking JSON configuration files ==="
    @find config/ -name "*.json" -exec echo "Checking {}" \; -exec jq empty {} \;

tf-fmt:
    tofu fmt -recursive

tf-init:
    tofu init -upgrade

tf-clean:
    rm -rf .terraform/
    rm -f terraform.tfstate.backup
    rm -f .terraform.lock.hcl
    @echo "Cleaned Terraform cache files"

vault-debug:
    #!/bin/bash
    VAULT_TOKEN="${VAULT_TOKEN:-$(grep VAULT_TOKEN .env 2>/dev/null | cut -d'=' -f2)}"
    VAULT_ADDR="${VAULT_ADDR:-$(grep VAULT_ADDR .env 2>/dev/null | cut -d'=' -f2)}"
    
    if [ -z "$VAULT_TOKEN" ] || [ -z "$VAULT_ADDR" ]; then
        echo "Error: VAULT_TOKEN and VAULT_ADDR must be set"
        exit 1
    fi
    
    echo "=== Available SSH Keys ==="
    curl -s -H "X-Vault-Token: $VAULT_TOKEN" "$VAULT_ADDR/v1/terraform/metadata/ssh_keys/?list=true" | jq -r '.data.keys[]'
    
    echo -e "\n=== Available API Credentials ==="
    curl -s -H "X-Vault-Token: $VAULT_TOKEN" "$VAULT_ADDR/v1/terraform/metadata/api_credentials/?list=true" | jq -r '.data.keys[]'

pve-lxc-check:
    #!/bin/bash
    echo "=== Container Status on PVE ==="
    ssh pve-01 "pct list"
    echo -e "\n=== Hook Scripts ==="
    ssh pve-01 "ls -la /var/lib/vz/snippets/*hook* 2>/dev/null || echo 'No hook scripts found'"

lxc-check-ssh-keys:
    #!/bin/bash
    echo "=== SSH Key Configuration Check ==="
    # Get vm_deployment private key from Vault
    VAULT_TOKEN="${VAULT_TOKEN:-$(grep VAULT_TOKEN .env 2>/dev/null | cut -d'=' -f2)}"
    VAULT_ADDR="${VAULT_ADDR:-$(grep VAULT_ADDR .env 2>/dev/null | cut -d'=' -f2)}"
    
    if [ -z "$VAULT_TOKEN" ] || [ -z "$VAULT_ADDR" ]; then
        echo "Error: VAULT_TOKEN and VAULT_ADDR must be set"
        exit 1
    fi
    
    # Get all SSH key fingerprints from Vault
    echo "=== Vault SSH Key Fingerprints ==="
    for key_type in vm_deployment ansible_management proxmox_host; do
        echo "üìã $key_type:"
        curl -s -H "X-Vault-Token: $VAULT_TOKEN" "$VAULT_ADDR/v1/terraform/data/ssh_keys/$key_type" | \
            jq -r '.data.data.public_key' | ssh-keygen -l -f - 2>/dev/null || echo "  ‚ùå Failed to get fingerprint"
    done
    
    echo -e "\n=== Container SSH Key Configuration ==="
    while IFS=$'\t' read -r key id name; do
        if [ -n "$id" ] && [ "$id" != "null" ]; then
            echo "üîç $name (ID: $id):"
            ssh pve-01 "pct exec $id -- bash -c 'if [ -f /root/.ssh/authorized_keys ]; then echo "  Keys found: \$(wc -l < /root/.ssh/authorized_keys)"; cat /root/.ssh/authorized_keys | grep -v "^#" | while read key; do echo "  üîë \$(echo \$key | ssh-keygen -l -f - 2>/dev/null || echo "Invalid key")"; done; else echo "  ‚ùå No authorized_keys file"; fi'" 2>/dev/null
        fi
    done < <(just _get-lxcs)

lxc-debug-ssh name:
    #!/bin/bash
    echo "=== SSH Debug for Container: {{name}} ==="
    VAULT_TOKEN="${VAULT_TOKEN:-$(grep VAULT_TOKEN .env 2>/dev/null | cut -d'=' -f2)}"
    VAULT_ADDR="${VAULT_ADDR:-$(grep VAULT_ADDR .env 2>/dev/null | cut -d'=' -f2)}"
    
    if [ -z "$VAULT_TOKEN" ] || [ -z "$VAULT_ADDR" ]; then
        echo "Error: VAULT_TOKEN and VAULT_ADDR must be set"
        exit 1
    fi
    
    # Get container details
    id=$(tofu output -json lxcs | jq -r '.["{{name}}"].id // empty')
    container_name=$(tofu output -json lxcs | jq -r '.["{{name}}"].name // empty')
    
    if [ -z "$id" ]; then
        echo "‚ùå Container '{{name}}' not found"
        exit 1
    fi
    
    echo "üîç Container: $container_name (ID: $id)"
    
    # Get IP address
    ip=$(ssh pve-01 "pct exec $id -- ip addr show eth0 | grep 'inet ' | head -1 | awk '{print \$2}' | cut -d'/' -f1" 2>/dev/null)
    echo "üåê IP Address: ${ip:-Not found}"
    
    # Check container status
    echo "üìä Container Status:"
    ssh pve-01 "pct status $id"
    
    # Check SSH service
    echo -e "\nüîß SSH Service Status:"
    ssh pve-01 "pct exec $id -- systemctl is-active ssh" 2>/dev/null || echo "  SSH service check failed"
    
    # Check authorized_keys
    echo -e "\nüîë SSH Keys Configuration:"
    ssh pve-01 "pct exec $id -- bash -c 'if [ -f /root/.ssh/authorized_keys ]; then echo \"File exists with \$(wc -l < /root/.ssh/authorized_keys) keys:\"; cat /root/.ssh/authorized_keys; else echo \"No authorized_keys file found\"; fi'" 2>/dev/null
    
    # Test SSH connection with different keys
    echo -e "\nüß™ Testing SSH Connections:"
    for key_type in vm_deployment ansible_management proxmox_host; do
        echo "Testing with $key_type key..."
        curl -s -H "X-Vault-Token: $VAULT_TOKEN" "$VAULT_ADDR/v1/terraform/data/ssh_keys/$key_type" | \
            jq -r '.data.data.private_key' > /tmp/${key_type}_key
        chmod 600 /tmp/${key_type}_key
        
        if [ -n "$ip" ]; then
            timeout 5 ssh -i /tmp/${key_type}_key -o ConnectTimeout=3 -o StrictHostKeyChecking=no root@$ip "echo '  ‚úÖ $key_type: Success'" 2>/dev/null || echo "  ‚ùå $key_type: Failed"
        else
            echo "  ‚è≠Ô∏è  $key_type: Skipped (no IP)"
        fi
        rm -f /tmp/${key_type}_key
    done


vm-debug-ssh name:
    #!/bin/bash
    echo "=== SSH Debug for VM: {{name}} ==="
    
    # Get VM details using script
    VM_ID=$(./scripts/get-vm-details.sh "{{name}}" id)
    VM_IP=$(./scripts/get-vm-details.sh get-ip "{{name}}")
    
    if [ -z "$VM_ID" ]; then
        echo "‚ùå VM '{{name}}' not found"
        exit 1
    fi
    
    echo "üîç VM: {{name}} (ID: $VM_ID)"
    echo "üåê IP Address: ${VM_IP:-Not available}"
    
    # Check VM status
    echo -e "\nüìä VM Status:"
    ./scripts/pve-ssh.sh "qm status $VM_ID"
    
    # Check QEMU Guest Agent
    echo -e "\nü§ñ QEMU Guest Agent Status:"
    ./scripts/guest-agent.sh status "$VM_ID"
    
    # Check if we can get network info from guest agent
    echo -e "\nüåê Network Info from Guest Agent:"
    ./scripts/guest-agent.sh network-info "$VM_ID"
    
    # Test SSH connection if IP is available
    if [ -n "$VM_IP" ]; then
        echo -e "\nüß™ Testing SSH Connections:"
        ./scripts/ssh-test.sh test-connection "$VM_IP"
        
        # Test cloud-init status via SSH
        echo -e "\n‚òÅÔ∏è  Cloud-init Status (via SSH):"
        ./scripts/cloud-init.sh status "$VM_IP"
    else
        echo -e "\n‚è≠Ô∏è  SSH tests skipped (no IP available)"
    fi

#
# Test SSH to VM with specific IP (when auto-detection fails)
vm-ssh-test name ip:
    #!/bin/bash
    echo "=== SSH Test for VM: {{name}} at {{ip}} ==="
    
    # Get VM details using script
    VM_ID=$(./scripts/get-vm-details.sh "{{name}}" id)
    
    if [ -z "$VM_ID" ]; then
        echo "‚ùå VM '{{name}}' not found"
        exit 1
    fi
    
    echo "üîç VM: {{name}} (ID: $VM_ID) at IP: {{ip}}"
    
    # Test SSH connection
    echo -e "\nüß™ Testing SSH Connections:"
    ./scripts/ssh-test.sh test-connection "{{ip}}"
    
    # Test cloud-init and guest agent status via SSH
    echo -e "\n‚òÅÔ∏è  Detailed Status Check (via SSH):"
    ./scripts/cloud-init.sh status "{{ip}}"

#
# Get VM IP addresses (if guest agent is working)
vm-get-ip name:
    #!/bin/bash
    echo "=== Getting IP for VM: {{name}} ==="
    VM_ID=$(./scripts/get-vm-details.sh "{{name}}" id)
    if [ -z "$VM_ID" ]; then
        echo "‚ùå VM '{{name}}' not found"
        exit 1
    fi
    ./scripts/guest-agent.sh network-info "$VM_ID" | jq -r '.[] | select(.name != "lo") | .["ip-addresses"][]? | select(.["ip-address-type"] == "ipv4") | .["ip-address"]' 2>/dev/null || echo "‚ùå Guest agent not available or no IP found"

#
# Test VM with password authentication (for debugging)
vm-password-test name ip password:
    #!/bin/bash
    echo "=== Password Auth Test for VM: {{name}} at {{ip}} ==="
    ./scripts/ssh-test.sh test-password "{{ip}}" "ubuntu" "{{password}}"
    ./scripts/ssh-test.sh test-password "{{ip}}" "root" "{{password}}"

#
# Quick cloud-init check (no waiting)
vm-cloudinit-check name:
    #!/usr/bin/env bash
    echo "=== Quick Cloud-init Check for VM: {{name}} ==="
    VM_IP=$(./scripts/get-vm-details.sh get-ip "{{name}}")
    if [ -z "$VM_IP" ]; then
        echo "‚ùå Could not get IP for VM {{name}}"
        exit 1
    fi
    echo "VM IP: $VM_IP"
    ./scripts/cloud-init.sh status "$VM_IP"

#
# Validate VM configuration for invalid characters
vm-validate-config name:
    #!/usr/bin/env bash
    echo "=== Validating VM Configuration for Invalid Characters: {{name}} ==="
    ./scripts/cloud-init.sh validate-config "{{name}}"

#
# Fix VM cloud-init configuration manually
vm-fix-cloudinit name:
    #!/usr/bin/env bash
    echo "=== Fixing Cloud-init Configuration for VM: {{name}} ==="
    ./scripts/cloud-init.sh fix-config "{{name}}"

#
# VM Management and Debugging Recipes
vm-create name:
    #!/usr/bin/env bash
    echo "=== Creating VM: {{name}} ==="
    TF_LOG="${TF_LOG_LEVEL}" TF_LOG_PATH="${TF_LOG_PATH}" tofu apply -target="module.vms[\"{{name}}\"]" -auto-approve

    if [ $? -eq 0 ]; then
        echo "‚úÖ VM creation completed successfully"
        echo ""
        echo "üîç Checking VM status and cloud-init..."
        
        # Get VM details using script
        VM_ID=$(./scripts/get-vm-details.sh "{{name}}" id)
        VM_IP=$(./scripts/get-vm-details.sh get-ip "{{name}}")
        
        if [ -n "$VM_ID" ]; then
            echo "üìã VM ID: $VM_ID"
            
            # Wait a moment for VM to start
            echo "‚è±Ô∏è Waiting 10 seconds for VM to initialize..."
            sleep 10
            
            # Check VM status
            echo "üìä VM Status:"
            ./scripts/pve-ssh.sh "qm status $VM_ID"
            
            # Check guest agent (may take time to start)
            echo ""
            echo "ü§ñ Guest Agent Status:"
            ./scripts/guest-agent.sh status "$VM_ID"
            
            # Get IP address if agent is working
            if [ -n "$VM_IP" ]; then
                echo ""
                echo "üåê Network Information:"
                echo "  üìç IP Address: $VM_IP"
            else
                echo ""
                echo "üåê Network Information:"
                echo "  ‚è≥ No IP assigned yet"
            fi
            
            # Check cloud-init status
            echo ""
            echo "‚òÅÔ∏è Cloud-init Status:"
            if [ -n "$VM_IP" ]; then
                ./scripts/cloud-init.sh status "$VM_IP"
            else
                echo "  ‚è≥ Cannot check cloud-init status (no IP yet)"
            fi
            
            echo ""
            echo "üí° Next steps:"
            echo "  - Run 'just vm-cloudinit-check {{name}}' for detailed cloud-init verification"
            echo "  - Run 'just vm-debug-ssh {{name}}' to test SSH connections once ready"
            echo "  - Check guest agent status: 'just vm-status {{name}}'"
        else
            echo "‚ùå Could not get VM ID from Terraform output"
        fi
    else
        echo "‚ùå VM creation failed"
        exit 1
    fi
#
#
vm-destroy name:
    #!/usr/bin/env bash
    echo "=== Destroying VM: {{name}} ==="
    VM_ID=$(./scripts/get-vm-details.sh "{{name}}" id)
    if [ -n "$VM_ID" ]; then
        echo "üõë Stopping VM $VM_ID via Proxmox..."
        ./scripts/pve-ssh.sh "qm stop $VM_ID" || true
        echo "üóëÔ∏è Destroying VM $VM_ID via Proxmox..."
        ./scripts/pve-ssh.sh "qm destroy $VM_ID --purge" || true
    fi
    echo "üßπ Removing from Terraform state..."
    tofu destroy -target="module.vms[\"{{name}}\"]" -auto-approve

#
# Complete cleanup for VM - handles prevent_destroy lifecycle rules
vm-cleanup name:
    #!/usr/bin/env bash
    echo "=== Complete VM Cleanup: {{name}} ==="
    
    # Get VM ID first
    VM_ID=$(./scripts/get-vm-details.sh "{{name}}" id)
    
    if [ -n "$VM_ID" ]; then
        echo "üõë Stopping VM $VM_ID via Proxmox..."
        ./scripts/pve-ssh.sh "qm stop $VM_ID" || true
        echo "üóëÔ∏è Destroying VM $VM_ID via Proxmox..."
        ./scripts/pve-ssh.sh "qm destroy $VM_ID --purge" || true
    fi
    
    echo "üßπ Removing VM resource from Terraform state..."
    tofu destroy -target="module.vms[\"{{name}}\"].proxmox_virtual_environment_vm.vm" -auto-approve || true
    
    echo "üóÇÔ∏è Removing user data file from Terraform state..."
    tofu destroy -target="module.vms[\"{{name}}\"].proxmox_virtual_environment_file.user_data" -auto-approve || true
    
    echo "üîë Removing password resource (bypassing prevent_destroy)..."
    tofu state rm "module.vms[\"{{name}}\"].random_password.admin_password[0]" 2>/dev/null || true
    tofu state rm "module.vms[\"{{name}}\"].null_resource.store_password_in_vault[0]" 2>/dev/null || true
    
    echo "‚úÖ Complete cleanup finished for {{name}}"

#
# Recreate VM with automatic cleanup and creation
vm-recreate name:
    #!/usr/bin/env bash
    echo "=== Recreating VM: {{name}} with cleanup ==="
    
    echo "üßπ Step 1: Complete cleanup..."
    just vm-cleanup {{name}}
    
    echo "‚è±Ô∏è Step 2: Waiting 5 seconds for cleanup to settle..."
    sleep 5
    
    echo "üöÄ Step 3: Creating VM with enhanced status checking..."
    just vm-create {{name}}

vm-status name: 
    #!/usr/bin/env bash
    echo "=== VM Status: {{name}} ==="
    VM_ID=$(./scripts/get-vm-details.sh "{{name}}" id)
    if [ -z "$VM_ID" ]; then
        echo "‚ùå VM not found in Terraform state"
        exit 1
    fi
    
    echo "üîç VM: {{name}} (ID: $VM_ID)"
    echo "üìã Proxmox VM Status:"
    ./scripts/pve-ssh.sh "qm status $VM_ID" || echo "‚ùå VM not found in Proxmox"
    
    echo -e "\nüåê Network Information:"
    ./scripts/guest-agent.sh network-info "$VM_ID"

vm-cloud-init-status name:
    #!/usr/bin/env bash
    echo "=== Cloud-init Status for VM: {{name}} ==="
    VM_IP=$(./scripts/get-vm-details.sh get-ip "{{name}}")
    if [ -z "$VM_IP" ]; then
        echo "‚ùå Could not get IP for VM {{name}}"
        exit 1
    fi
    ./scripts/cloud-init.sh status "$VM_IP"

vm-cloud-init-full name:
    #!/usr/bin/env bash
    echo "=== Full Cloud-init Configuration for VM: {{name}} ==="
    ./scripts/cloud-init.sh show-config "{{name}}"

#
# Check cloud-init logs for VM
vm-cloud-init-logs name:
    #!/usr/bin/env bash
    echo "=== Comprehensive Cloud-init Logs for VM: {{name}} ==="
    VM_IP=$(./scripts/get-vm-details.sh get-ip "{{name}}")
    if [ -z "$VM_IP" ]; then
        echo "‚ùå Could not get IP for VM {{name}}"
        exit 1
    fi
    ./scripts/cloud-init.sh logs "$VM_IP"

# Monitor cloud-init operations in real-time
vm-monitor-cloudinit name:
    #!/usr/bin/env bash
    echo "=== Real-time Cloud-init Monitoring for VM: {{name}} ==="
    ./scripts/cloud-init.sh monitor "{{name}}"

# View cloud-init merge operation logs - where custom config is applied over Proxmox defaults
vm-cloud-init-merge-logs name:
    #!/usr/bin/env bash
    echo "=== Cloud-init Merge Operation Logs for VM: {{name}} ==="
    VM_IP=$(./scripts/get-vm-details.sh get-ip "{{name}}")
    if [ -z "$VM_IP" ]; then
        echo "‚ùå Could not get IP for VM {{name}}"
        exit 1
    fi
    ./scripts/cloud-init.sh merge-logs "$VM_IP"

vm-guest-agent-debug name:
    #!/usr/bin/env bash
    echo "=== Guest Agent Debug for VM: {{name}} ==="
    VM_ID=$(./scripts/get-vm-details.sh "{{name}}" id)
    if [ -z "$VM_ID" ]; then
        echo "‚ùå VM not found"
        exit 1
    fi
    ./scripts/guest-agent.sh debug "$VM_ID"

#
## Cancel current apply and recreate VM with fixed config
vm-recreate-with-fix name:
    #!/bin/bash
    echo "=== Recreating VM {{name}} with fixed configuration ==="
    
    # Get VM ID
    VM_ID=$(./scripts/get-vm-details.sh "{{name}}" id)
    if [ -z "$VM_ID" ]; then
        echo "‚ùå VM '{{name}}' not found"
        exit 1
    fi
    
    echo "üõë Stopping any running apply operations..."
    pkill -f "tofu apply" || true
    
    echo "üóëÔ∏è  Destroying current VM..."
    tofu destroy -target='module.vms["{{name}}"]' -auto-approve
    
    echo "üîß Applying with fixed cloud-init configuration..."
    tofu apply -target='module.vms["{{name}}"]' -auto-approve



# tf-emergency-cleanup:
#     #!/bin/bash
#     echo "‚ö†Ô∏è  This will destroy ALL infrastructure and clean cache files!"
#     read -p "Are you sure? (yes/no): " confirm
#     if [ "$confirm" = "yes" ]; then
#         just destroy-auto
#         just clean
#         echo "Emergency cleanup completed"
#     else
#         echo "Cancelled"
#     fi
#
#
# Recreate LXC
tf-r-lxc name:
    just tf-d-lxc {{name}}
    sleep 5
    just tf-a-lxc {{name}}
#
##
#
tf-debug *args:
    TF_LOG={{ TF_LOG_LEVEL}} TF_LOG_PATH={{ TF_LOG_PATH }} tofu {{args}}


tfad:
    just tf-debug apply --auto-approve

tf-a-lxc name:
    tofu apply -target='module.lxcs["{{name}}"]' --auto-approve

tf-p-lxc name:
    tofu plan -target='module.lxcs["{{name}}"]'


tf-d-lxc name:
    tofu destroy -target='module.lxcs["{{name}}"]' --auto-approve


tfdd:
    just tf-debug destroy --auto-approve


tf-plan-debug:
    just tf-debug plan


#
# Check VM guest agent
tf-pve-vm-check-guest-agent vm_id:
    @echo "Checking QEMU Guest Agent status..."
    ssh pve-01 "qm agent {{vm_id}} ping" || echo "Guest agent not responding"
    ssh pve-01 "qm config {{vm_id}} | grep agent" || echo "No agent config found"
#
# Check VM status and config
tf-pve-vm-check-status vm_id:
    ssh pve-01 "qm status {{vm_id}}"
    ssh pve-01 "qm config {{vm_id}}"



#
pve-logs-tasks:
    ssh pve-01 'sudo tail -n 200 -F /var/log/syslog /var/log/pve/tasks/*'
#
#
pve-logs-sys:
    ssh pve-01 'sudo journalctl -f -u pveproxy -u pvedaemon'
#
pve-logs-multi:
    ssh pve-01 'sudo tail -F /var/log/syslog /var/log/pve/tasks/*' | multitail -
#
#
pve-logs-lxc id name:
    ssh root@192.168.6.{{ id }} "journalctl -u {{ name }} -n 200 --no-pager"

logs-homepage:
    just pve-logs-lxc 100 "homepage"

#
# Run PCT exec 'cmd' for LXC 'id'
pct-exec id cmd:
    ssh pve-01 "pct exec {{id}} -- {{cmd}}"
#
# Monitor processes on PVE
pve-monitor:
    ssh pve-01 "watch -n 1 'free -h && echo "---" && ps aux --sort=-%mem | head -10'"
